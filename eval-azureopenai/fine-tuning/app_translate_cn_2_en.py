# generated by chatgpt 3.5 turbo 0301
import sys
import os
import time
import datetime
sys.path.insert(0, f"{os.environ.get('eval-azureopenai-path')}")
from azopenai_env import *

def split_content(content, max_size=1500):
    """
    Splits a string into multiple parts based on a maximum size.

    Args:
        content (str): The string to split.
        max_size (int): The maximum size of each part (in bytes).

    Returns:
        list: A list of strings, where each string corresponds to a part of the original string.
    """
    parts = []
    current_part = ''
    current_part_size = 0
    lines = content.split('\n')
    for line in lines:
        line_size = len(line.encode('utf-8'))  # get the size of the line in bytes
        if line_size > max_size:
            raise ValueError(f"Line '{line[:10]}...' exceeds maximum size of {max_size} bytes")
        if current_part_size + line_size + 1 <= max_size:  # +1 for the newline character
            current_part += line + '\n'
            current_part_size += line_size + 1
        else:
            parts.append(current_part.rstrip())  # remove trailing whitespace and add to parts list
            current_part = line + '\n'
            current_part_size = line_size + 1
    parts.append(current_part.rstrip())  # add the final part to the list

    return parts

def translate_cn_2_en(content):
    cn_parts = split_content(content)
    en_content = ''
    for cn_part in cn_parts:
        print(f"{datetime.datetime.now()}===================")
        print(f"CN:{cn_part}")

        response = openai.ChatCompletion.create(
            #engine="gpt-35-turbo", 
            #engine="baoywang-text-davinci-002",
            engine="baoywang-gpt-35-turbo-0301",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": f"translate Chinese to English, and return english only, below is the input\n{cn_part}"},
            ]
        )
        en_part = response['choices'][0]['message']['content']
        en_content = en_content + '\n' + en_part
        print(f"EN:{en_part}")
        time.sleep(5)
    return en_content

def translate_cn_2_en_file(cnFilePath):
    cnFileContent = ''
    with open(cnFilePath, 'r', encoding='utf-8') as file:
        for line in file:
            if line.strip() == '':
                continue
            if line.strip().casefold() == "Image".casefold():
                continue
            cnFileContent = cnFileContent + '\n' + line.strip()
    cnFileContent = cnFileContent.strip()
    enContent = translate_cn_2_en(cnFileContent)
    return enContent

# 我没有使用本脚本因为，其对某些内容无法翻译，而且不好预测
# BTW: 最后直接使用edge 浏览器的翻译（直接翻译当前网页，需要拖拽浏览所有内容）
#curl https://baoywang-instance001.openai.azure.com/openai/deployments/baoywang-gpt-35-turbo-0301/chat/completions?api-version=2023-03-15-preview \
#    -H "Content-Type: application/json" \
#    -H "api-key: ${OPENAI_API_KEY}" \
#    -d  @2.txt
# {"error":{"message":"The response was filtered due to the prompt triggering Azure OpenAI’s content management policy. Please modify your prompt and retry. To learn more about our content filtering policies please read our documentation: https://go.microsoft.com/fwlink/?linkid=2198766","type":null,"param":"prompt","code":"content_filter","status":400}}
### {"messages":[{"role":"user","content":"这是一个小文章，翻译为英文，内容如下:得是多么大的仇恨。对于这种情况，自古俩办法：1、怀柔对待，选拔当地大族进中央熟悉政策，然后派本地人来搞试点，用收买地方上层阶级打开局面，然后几十年的时间完成过渡。2、暴力对待，用高洋同志的好思想就是“快刀斩乱麻”，既然已经盘根错节捋不清了，那就消灭吧。都不用猜，你别指望杨坚那边会让步和怀柔。杨坚面对江南的遍地游击土匪表示给我打！派出了自己的小猛兽杨素率兵前后战役百余次后将江南大部平定，把南国拿炮火再犁了一遍。"}]}

cnFile=sys.argv[1]
enFile=sys.argv[2]
en=translate_cn_2_en_file(cnFile)
with open(enFile, 'w', encoding='utf-8') as file:
    file.write(en)
print("done")